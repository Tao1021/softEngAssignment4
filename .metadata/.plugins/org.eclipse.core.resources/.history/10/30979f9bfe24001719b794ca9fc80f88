from flask import Flask, render_template, url_for, request, session, flash, g, jsonify
import json
import functools
import numpy as np
import pandas as pd
import datetime
import time
import sys
from flask_mysqldb import MySQLdb
import dbconnect

#create appl object
app = Flask(__name__)
todaysDay = datetime.date.today().strftime("%A") #
ChartDay = todaysDay[:3] #check ordering here

@app.route("/")
def index():
    return render_template('index.html')

sql = """SELECT DISTINCT
    static.num,
    static.addr,
    DynamicTest.last_update,
    DynamicTest.status,
    static.lat,
    static.longti,
    DynamicTest.available_bikes,
    DynamicTest.available_bike_stands,
    DynamicTest.bike_stands,
    DynamicTest.banking
FROM
    static,
    DynamicTest
WHERE
    static.num = DynamicTest.num
ORDER BY DynamicTest.uniqueID DESC
LIMIT 101;"""

sql1 = """SELECT DISTINCT
    weather.timeStamp,
    weather.weatherID,
    weather.temp,
    weather.descp,
    weather.icons
FROM
    weather
ORDER BY uniqueID DESC
LIMIT 1;"""
  
sql2 = """SELECT DISTINCT
  static.num,
  DynamicTest.last_update,
  DynamicTest.available_bikes,
  DynamicTest.available_bike_stands
FROM
  static,
  DynamicTest
WHERE
  static.num = DynamicTest.num
  and static.num = 1
  and DynamicTest.last_update LIKE '{}%';
  """
    
sql3 = """SELECT DISTINCT
  static.num,
  DynamicTest.last_update,
  DynamicTest.available_bikes,
  DynamicTest.available_bike_stands
FROM
  static,
  DynamicTest
WHERE
  static.num = DynamicTest.num
  and static.num = 1;
  """

@app.route('/weather')
def get_weather():
    g.db = dbconnect.connection()
    c = g.db.cursor()
    cur = c.execute(sql1) 
    rows = c.fetchall()
    weather = []
    for eachRow in rows:
        weather.append(eachRow)
    c.close()
    g.db.close()
    return jsonify(weather=weather)

@app.route('/stations1')
@functools.lru_cache(maxsize=128)
def get_dynamicData():
    g.db = dbconnect.connection()
    c = g.db.cursor()
    cur = c.execute(sql) 
    rows = c.fetchall()
    stations = []
    for eachRow in rows:
        stations.append(eachRow)
    c.close()
    g.db.close()
    return jsonify(stations=stations)

# Should add another app route here and add the data up into here. 
@app.route('/selectedStation', methods=['GET', 'POST'])
def selectedStation():
    print("hello")
    StationData = "Null"
    if request.method == "POST":
        StationData = request.json['data']
        print("Hello")
        print(StationData)
        return StationData
    return StationData

@app.route('/chart')
def make_chart():
   y = selectedStation()
   print(y)
   g.db = dbconnect.connection()
   c = g.db.cursor()
   cur = c.execute(sql2.format(ChartDay))
   chdata=[x for x in c.fetchall()]
   df=pd.DataFrame(data=chdata)
   df['avgVacency'] = round(df[2] / (df[3] + df[2]), 2)
   
   # convert string time to datetime for easy manipulation
   end = datetime.time(0,0,0)
   start = datetime.time(6,0,0)
   df[1] = pd.to_datetime(df[1]).dt.time

   # create variables for time intervals.
   interval0s = datetime.time(6,0,0)
   interval0e = datetime.time(8,59,59)
   interval1s = datetime.time(9,0,0)
   interval1e = datetime.time(11,59,59)
   interval2s = datetime.time(12,0,0)
   interval2e = datetime.time(14,59,59)
   interval3s = datetime.time(15,0,0)
   interval3e = datetime.time(17,59,59)
   interval4s = datetime.time(18,0,0)
   interval4e = datetime.time(20,59,59)
   interval5s = datetime.time(21,0,0)
   interval5e = datetime.time(23,59,59)
   
   df['interval'] = 0
   for i, row in df.iterrows():
       if df[1][i] > end and df[1][i] < start:
           df.drop(i, inplace=True)
       elif df[1][i] > interval0s and df[1][i] < interval0e:
           df.loc[i, 'interval'] = 1
       elif df[1][i] > interval1s and df[1][i] < interval1e:
           df.loc[i, 'interval'] = 2
       elif df[1][i] > interval2s and df[1][i] < interval2e:
           df.loc[i, 'interval'] = 3
       elif df[1][i] > interval3s and df[1][i] < interval3e:
           df.loc[i, 'interval'] = 4
       elif df[1][i] > interval4s and df[1][i] < interval4e:
           df.loc[i, 'interval'] = 5
       elif df[1][i] > interval5s and df[1][i] < interval5e:
           df.loc[i, 'interval'] = 6
  
   df = df.to_json(orient='records')
   c.close()
   g.db.close()
   return df
@app.route('/chartWeek')
def make_chartWeekly():
   g.db = dbconnect.connection()
   c = g.db.cursor()
   cur = c.execute(sql3)
   chdata=[x for x in c.fetchall()]
   df=pd.DataFrame(data=chdata)
   df['avgVacency'] = round(df[2] / (df[3] + df[2]), 2)
   # convert string time to datetime for easy manipulation
   end = datetime.time(0,0,0)
   start = datetime.time(6,0,0)
   df['day'] = pd.to_datetime(df[1]).dt.strftime("%A")
   df[1] = pd.to_datetime(df[1]).dt.time
 
   # create variables for time intervals.
   interval0s = datetime.time(6,0,0)
   interval0e = datetime.time(8,59,59)
   interval1s = datetime.time(9,0,0)
   interval1e = datetime.time(11,59,59)
   interval2s = datetime.time(12,0,0)
   interval2e = datetime.time(14,59,59)
   interval3s = datetime.time(15,0,0)
   interval3e = datetime.time(17,59,59)
   interval4s = datetime.time(18,0,0)
   interval4e = datetime.time(20,59,59)
   interval5s = datetime.time(21,0,0)
   interval5e = datetime.time(23,59,59)
    
   df['interval'] = 0
   for i, row in df.iterrows():
       if df[1][i] > end and df[1][i] < start:
           df.drop(i, inplace=True)
       elif df[1][i] > interval0s and df[1][i] < interval0e:
           df.loc[i, 'interval'] = 1
       elif df[1][i] > interval1s and df[1][i] < interval1e:
           df.loc[i, 'interval'] = 2
       elif df[1][i] > interval2s and df[1][i] < interval2e:
           df.loc[i, 'interval'] = 3
       elif df[1][i] > interval3s and df[1][i] < interval3e:
           df.loc[i, 'interval'] = 4
       elif df[1][i] > interval4s and df[1][i] < interval4e:
           df.loc[i, 'interval'] = 5
       elif df[1][i] > interval5s and df[1][i] < interval5e:
           df.loc[i, 'interval'] = 6
   
   df = df.to_json(orient='records')
   c.close()
   g.db.close()
   return df
if __name__ == '__main__':
        app.run(debug=True, use_reloader=True)