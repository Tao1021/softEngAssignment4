from flask import Flask, render_template, url_for, request, session, flash, g, jsonify
import time
# from app import *
import functools
import numpy as np
import pandas as pd
import datetime
import time
import sys
from flask_mysqldb import MySQLdb

app = Flask(__name__)
def connection():
    try:
        conn = MySQLdb.connect(host='dublinbike.clpyaelniude.us-west-2.rds.amazonaws.com',
                               user='Tao',
                               password='abcd2530', 
                               database='dublinbike18')
        return conn
    
    except Exception as e:
        print(e.message, e.args)
myconnect=connection()
sql2 = """SELECT DISTINCT
  static.num,
  DynamicTest.last_update,
  DynamicTest.available_bikes,
  DynamicTest.available_bike_stands
FROM
  static,
  DynamicTest
WHERE
  static.num = DynamicTest.num
  and static.num =1
  and DynamicTest.last_update LIKE '{}%';
  """

sql3 = """SELECT DISTINCT
  static.num,
  DynamicTest.last_update,
  DynamicTest.available_bikes,
  DynamicTest.available_bike_stands
FROM
  static,
  DynamicTest
WHERE
  static.num = DynamicTest.num
  and static.num = 1; 
  """	
# Create an array that will contain running times .
linear_time =[]
linear_time2=[]

todaysDay = datetime.date.today().strftime("%A") #
ChartDay = todaysDay[:3] #check ordering here


def make_chart():
    myconnect=connection()
    c = myconnect.cursor()
    cur = c.execute(sql2.format(ChartDay))
    chdata=[x for x in c.fetchall()]
    df=pd.DataFrame(data=chdata)
    
    # Find max value for the y axis on the graph. Otherwise it just takes average.
    dfMax = df.iloc[df[3].max()]
    vAxis = dfMax.ix[3] + dfMax.ix[2]

    df['avgVacency'] = round(df[2], 0) # / (df[3] + df[2]), 2)
    # convert string time to datetime for easy manipulation
    end = datetime.time(0,0,0)
    start = datetime.time(6,0,0)
    df[1] = pd.to_datetime(df[1]).dt.time
    
    # create variables for time intervals.
    interval0s = datetime.time(6,0,0)
    interval0e = datetime.time(8,59,59)
    interval1s = datetime.time(9,0,0)
    interval1e = datetime.time(11,59,59)
    interval2s = datetime.time(12,0,0)
    interval2e = datetime.time(14,59,59)
    interval3s = datetime.time(15,0,0)
    interval3e = datetime.time(17,59,59)
    interval4s = datetime.time(18,0,0)
    interval4e = datetime.time(20,59,59)
    interval5s = datetime.time(21,0,0)
    interval5e = datetime.time(23,59,59)
    
    df['interval1'] = 0
    df['interval2'] = 0
    df['interval3'] = 0
    df['interval4'] = 0
    df['interval5'] = 0
    df['interval6'] = 0
    
    for i, row in df.iterrows():
        if df[1][i] > end and df[1][i] < start:
            df.drop(i, inplace=True)
        elif df[1][i] > interval0s and df[1][i] < interval0e:
            df.loc[i, 'interval1'] = 1
        elif df[1][i] > interval1s and df[1][i] < interval1e:
            df.loc[i, 'interval2'] = 2
        elif df[1][i] > interval2s and df[1][i] < interval2e:
            df.loc[i, 'interval3'] = 3
        elif df[1][i] > interval3s and df[1][i] < interval3e:
            df.loc[i, 'interval4'] = 4
        elif df[1][i] > interval4s and df[1][i] < interval4e:
            df.loc[i, 'interval5'] = 5
        elif df[1][i] > interval5s and df[1][i] < interval5e:
            df.loc[i, 'interval6'] = 6
       
    dfOne = df.loc[df['interval1'] == 1]
    df2 = df.loc[df['interval2'] == 2]
    df3 = df.loc[df['interval3'] == 3]
    df4 = df.loc[df['interval4'] == 4]
    df5 = df.loc[df['interval5'] == 5]
    df6 = df.loc[df['interval6'] == 6] #is this getting all values?

    mean1 = np.mean(dfOne["avgVacency"]) #.round
    mean2 = np.mean(df2["avgVacency"])
    mean3 = np.mean(df3["avgVacency"])
    mean4 = np.mean(df4["avgVacency"])
    mean5 = np.mean(df5["avgVacency"])
    mean6 = np.mean(df6["avgVacency"])

    columns = ['Time', 'avgVac', 'TotalBikes']
    dfFinal = pd.DataFrame([["06:00 - 09:00", mean1, vAxis], ["09:00 - 12:00", mean2, vAxis], 
                            ["12:00 - 15:00", mean3, vAxis], ["15:00 - 18:00", mean4, vAxis], 
                            ["18:00 - 21:00", mean5, vAxis], ["21:00 - 00:00", mean6, vAxis]], 
                           columns=columns)
    df1 = dfFinal.to_json(orient='records') #json string
    c.close()
    myconnect.close()
    return df1




def make_chartWeekly():
    myconnect=connection()
    c = myconnect.cursor()
    cur = c.execute(sql3)
    chdata = [x for x in c.fetchall()]
    df = pd.DataFrame(data=chdata)
    
    # Find max value for the y axis on the graph. Otherwise it just takes average.
    dfMax = df.iloc[df[3].max()]
    vAxis = dfMax.ix[3] + dfMax.ix[2]


    df['avgVacency'] = round(df[2], 0) # / (df[3] + df[2]), 2)
    # convert string time to datetime for easy manipulation
    end = datetime.time(0,0,0)
    start = datetime.time(6,0,0)
    df['Time'] = pd.to_datetime(df[1]).dt.time
    df['Day'] = pd.to_datetime(df[1]).dt.weekday_name
    
    interval0s = datetime.time(6,0,0)
    interval0e = datetime.time(8,59,59)
    interval1s = datetime.time(9,0,0)
    interval1e = datetime.time(11,59,59)
    interval2s = datetime.time(12,0,0)
    interval2e = datetime.time(14,59,59)
    interval3s = datetime.time(15,0,0)
    interval3e = datetime.time(17,59,59)
    interval4s = datetime.time(18,0,0)
    interval4e = datetime.time(20,59,59)
    interval5s = datetime.time(21,0,0)
    interval5e = datetime.time(23,59,59)
    
    df['interval1'] = 0
    df['interval2'] = 0
    df['interval3'] = 0
    df['interval4'] = 0
    df['interval5'] = 0
    df['interval6'] = 0
    
    for i, row in df.iterrows():
        if df['Time'][i] > end and df['Time'][i] < start:
            df.drop(i, inplace=True)
        elif df['Time'][i] > interval0s and df['Time'][i] < interval0e:
            df.loc[i, 'interval1'] = 1
        elif df['Time'][i] > interval1s and df['Time'][i] < interval1e:
            df.loc[i, 'interval2'] = 2
        elif df['Time'][i] > interval2s and df['Time'][i] < interval2e:
            df.loc[i, 'interval3'] = 3
        elif df['Time'][i] > interval3s and df['Time'][i] < interval3e:
            df.loc[i, 'interval4'] = 4
        elif df['Time'][i] > interval4s and df['Time'][i] < interval4e:
            df.loc[i, 'interval5'] = 5
        elif df['Time'][i] > interval5s and df['Time'][i] < interval5e:
            df.loc[i, 'interval6'] = 6
       
#     x = df.groupby.(['ShippingTime_minHours', 'SellerId']).count()
    monInt1 = df[(df['Day'] == 'Monday') & (df['interval1'] == 1)].mean()
    monInt2 = df[(df['Day'] == 'Monday') & (df['interval2'] == 2)].mean()
    monInt3 = df[(df['Day'] == 'Monday') & (df['interval3'] == 3)].mean()
    monInt4 = df[(df['Day'] == 'Monday') & (df['interval4'] == 4)].mean()
    monInt5 = df[(df['Day'] == 'Monday') & (df['interval5'] == 5)].mean()
    monInt6 = df[(df['Day'] == 'Monday') & (df['interval6'] == 6)].mean()

    tueInt1 = df[(df['Day'] == 'Tuesday') & (df['interval1'] == 1)].mean()
    tueInt2 = df[(df['Day'] == 'Tuesday') & (df['interval2'] == 2)].mean()
    tueInt3 = df[(df['Day'] == 'Tuesday') & (df['interval3'] == 3)].mean()
    tueInt4 = df[(df['Day'] == 'Tuesday') & (df['interval4'] == 4)].mean()
    tueInt5 = df[(df['Day'] == 'Tuesday') & (df['interval5'] == 5)].mean()
    tueInt6 = df[(df['Day'] == 'Tuesday') & (df['interval6'] == 6)].mean()
    
    wedInt1 = df[(df['Day'] == 'Wednesday') & (df['interval1'] == 1)].mean()
    wedInt2 = df[(df['Day'] == 'Wednesday') & (df['interval2'] == 2)].mean()
    wedInt3 = df[(df['Day'] == 'Wednesday') & (df['interval3'] == 3)].mean()
    wedInt4 = df[(df['Day'] == 'Wednesday') & (df['interval4'] == 4)].mean()
    wedInt5 = df[(df['Day'] == 'Wednesday') & (df['interval5'] == 5)].mean()
    wedInt6 = df[(df['Day'] == 'Wednesday') & (df['interval6'] == 6)].mean()
    
    thuInt1 = df[(df['Day'] == 'Thursday') & (df['interval1'] == 1)].mean()
    thuInt2 = df[(df['Day'] == 'Thursday') & (df['interval2'] == 2)].mean()
    thuInt3 = df[(df['Day'] == 'Thursday') & (df['interval3'] == 3)].mean()
    thuInt4 = df[(df['Day'] == 'Thursday') & (df['interval4'] == 4)].mean()
    thuInt5 = df[(df['Day'] == 'Thursday') & (df['interval5'] == 5)].mean()
    thuInt6 = df[(df['Day'] == 'Thursday') & (df['interval6'] == 6)].mean()
    
    friInt1 = df[(df['Day'] == 'Friday') & (df['interval1'] == 1)].mean()
    friInt2 = df[(df['Day'] == 'Friday') & (df['interval2'] == 2)].mean()
    friInt3 = df[(df['Day'] == 'Friday') & (df['interval3'] == 3)].mean()
    friInt4 = df[(df['Day'] == 'Friday') & (df['interval4'] == 4)].mean()
    friInt5 = df[(df['Day'] == 'Friday') & (df['interval5'] == 5)].mean()
    friInt6 = df[(df['Day'] == 'Friday') & (df['interval6'] == 6)].mean()
    
    satInt1 = df[(df['Day'] == 'Saturday') & (df['interval1'] == 1)].mean()
    satInt2 = df[(df['Day'] == 'Saturday') & (df['interval2'] == 2)].mean()
    satInt3 = df[(df['Day'] == 'Saturday') & (df['interval3'] == 3)].mean()
    satInt4 = df[(df['Day'] == 'Saturday') & (df['interval4'] == 4)].mean()
    satInt5 = df[(df['Day'] == 'Saturday') & (df['interval5'] == 5)].mean()
    satInt6 = df[(df['Day'] == 'Saturday') & (df['interval6'] == 6)].mean()
    
    sunInt1 = df[(df['Day'] == 'Sunday') & (df['interval1'] == 1)].mean()
    sunInt2 = df[(df['Day'] == 'Sunday') & (df['interval2'] == 2)].mean()
    sunInt3 = df[(df['Day'] == 'Sunday') & (df['interval3'] == 3)].mean()
    sunInt4 = df[(df['Day'] == 'Sunday') & (df['interval4'] == 4)].mean()
    sunInt5 = df[(df['Day'] == 'Sunday') & (df['interval5'] == 5)].mean()
    sunInt6 = df[(df['Day'] == 'Sunday') & (df['interval6'] == 6)].mean()
    
    
    weekMean = [[(round(monInt1['avgVacency'],0)), (round(monInt2['avgVacency'],0)), (round(monInt3['avgVacency'],0)),
                  (round(monInt4['avgVacency'],0)), (round(monInt5['avgVacency'],0)), (round(monInt6['avgVacency'],0))],
                [(round(tueInt1['avgVacency'],0)), (round(tueInt2['avgVacency'],0)), (round(tueInt3['avgVacency'],0)),
                  (round(tueInt4['avgVacency'],0)), (round(tueInt5['avgVacency'],0)), (round(tueInt6['avgVacency'],0))],
                [(round(wedInt1['avgVacency'],0)), (round(wedInt2['avgVacency'],0)), (round(wedInt3['avgVacency'],0)),
                  (round(wedInt4['avgVacency'],0)), (round(wedInt5['avgVacency'],0)), (round(wedInt6['avgVacency'],0))],
                [(round(thuInt1['avgVacency'],0)), (round(thuInt2['avgVacency'],0)), (round(thuInt3['avgVacency'],0)),
                  (round(thuInt4['avgVacency'],0)), (round(thuInt5['avgVacency'],0)), (round(thuInt6['avgVacency'],0))],
                [(round(friInt1['avgVacency'],0)), (round(friInt2['avgVacency'],0)), (round(friInt3['avgVacency'],0)),
                  (round(friInt4['avgVacency'],0)), (round(friInt5['avgVacency'],0)), (round(friInt6['avgVacency'],0))],
                [(round(satInt1['avgVacency'],0)), (round(satInt2['avgVacency'],0)), (round(satInt3['avgVacency'],0)),
                  (round(satInt4['avgVacency'],0)), (round(satInt5['avgVacency'],0)), (round(satInt6['avgVacency'],0))],
                [(round(sunInt1['avgVacency'],0)), (round(sunInt2['avgVacency'],0)), (round(sunInt3['avgVacency'],0)),
                  (round(sunInt4['avgVacency'],0)), (round(sunInt5['avgVacency'],0)), (round(sunInt6['avgVacency'],0))]]
    c.close()
    myconnect.close()

    return weekMean

start =time.time() 
make_chart()
make_chartWeekly()
end = time.time()
run_time =end-start
linear_time.append(run_time)
print(run_time)
