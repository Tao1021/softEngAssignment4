from flask import Flask, render_template, url_for, request, session, flash, g, jsonify
import functools
import numpy as np
import pandas as pd
import datetime
import time
import sys
from flask_mysqldb import MySQLdb
import dbconnect

#create app object
app = Flask(__name__)

@app.route("/")
def index():
    return render_template('index.html')

# Create variable from todays date to pass into the sql query when clicked. 
todaysDay = datetime.date.today().strftime("%A") #
ChartDay = todaysDay[:3] #check ordering here

# SQL query to display current weather
sql1 = """SELECT DISTINCT
    weather.timeStamp,
    weather.weatherID,
    weather.temp,
    weather.descp,
    weather.icons
FROM
    weather
ORDER BY uniqueID DESC
LIMIT 1;"""
  
# SQL query  to display daily chart information by station id(passed from javascript ajax)
# chart day information is passed from chartDay variable above into Like parameter.
sql2 = """SELECT DISTINCT
  static.num,
  DynamicTest.last_update,
  DynamicTest.available_bikes,
  DynamicTest.available_bike_stands
FROM
  static,
  DynamicTest
WHERE
  static.num = DynamicTest.num
  and static.num = '{stationChart}'
  and DynamicTest.last_update LIKE '{}%';
  """

# SQL query for weekly chart information by station id.
sql3 = """SELECT DISTINCT
  static.num,
  DynamicTest.last_update,
  DynamicTest.available_bikes,
  DynamicTest.available_bike_stands
FROM
  static,
  DynamicTest
WHERE
  static.num = DynamicTest.num
  and static.num = '{stationChart}';
  """
  
# SQL query for search function. 
sql4 = """SELECT DISTINCT
    static.num,
    static.addr,
    DynamicTest.last_update,
    DynamicTest.status,
    static.lat,
    static.longti,
    DynamicTest.available_bikes,
    DynamicTest.available_bike_stands,
    DynamicTest.bike_stands,
    DynamicTest.banking
FROM
    static,
    DynamicTest
WHERE
    static.num = DynamicTest.num and
    static.addr= '{addr}'
ORDER BY uniqueID DESC
LIMIT 1;
    """

# Flask function to display weather. Passes SQL to list and returns output on webpage in json format. 
@app.route('/weather')
def get_weather():
    g.db = dbconnect.connection()
    c = g.db.cursor()
    cur = c.execute(sql1) 
    rows = c.fetchall()
    weather = []
    for eachRow in rows:
        weather.append(eachRow)
    c.close()
    g.db.close()
    return jsonify(weather=weather)

# Flask function that takes station clicked via ajax request returns output on webpage in json format. 
@app.route('/selectedStation', methods=['GET', 'POST'])
def selectedStation():
    if request.method == "POST":
        global stationData
        stationData = 0
        stationData = request.json['data']
        return jsonify(stationData=stationData)
    return jsonify(stationData=stationData)

# Flask funciton to send
@app.route('/chart')
def make_chart():
    g.db = dbconnect.connection()
    c = g.db.cursor()
    cur = c.execute(sql2.format(ChartDay, stationChart=stationData))
    chdata=[x for x in c.fetchall()]
    df=pd.DataFrame(data=chdata)
    
    # Find max value for the y axis on the graph. Otherwise it just takes average.
    dfMax = df.iloc[df[3].max()]
    vAxis = dfMax.ix[3] + dfMax.ix[2]

    df['avgVacency'] = round(df[2], 0) # / (df[3] + df[2]), 2)
    # convert string time to datetime for easy manipulation
    end = datetime.time(0,0,0)
    start = datetime.time(6,0,0)
    df[1] = pd.to_datetime(df[1]).dt.time
    
    # create variables for time intervals.
    interval0s = datetime.time(6,0,0)
    interval0e = datetime.time(8,59,59)
    interval1s = datetime.time(9,0,0)
    interval1e = datetime.time(11,59,59)
    interval2s = datetime.time(12,0,0)
    interval2e = datetime.time(14,59,59)
    interval3s = datetime.time(15,0,0)
    interval3e = datetime.time(17,59,59)
    interval4s = datetime.time(18,0,0)
    interval4e = datetime.time(20,59,59)
    interval5s = datetime.time(21,0,0)
    interval5e = datetime.time(23,59,59)
    
    df['interval1'] = 0
    df['interval2'] = 0
    df['interval3'] = 0
    df['interval4'] = 0
    df['interval5'] = 0
    df['interval6'] = 0
    
    for i, row in df.iterrows():
        if df[1][i] > end and df[1][i] < start:
            df.drop(i, inplace=True)
        elif df[1][i] > interval0s and df[1][i] < interval0e:
            df.loc[i, 'interval1'] = 1
        elif df[1][i] > interval1s and df[1][i] < interval1e:
            df.loc[i, 'interval2'] = 2
        elif df[1][i] > interval2s and df[1][i] < interval2e:
            df.loc[i, 'interval3'] = 3
        elif df[1][i] > interval3s and df[1][i] < interval3e:
            df.loc[i, 'interval4'] = 4
        elif df[1][i] > interval4s and df[1][i] < interval4e:
            df.loc[i, 'interval5'] = 5
        elif df[1][i] > interval5s and df[1][i] < interval5e:
            df.loc[i, 'interval6'] = 6
       
    dfOne = df.loc[df['interval1'] == 1]
    df2 = df.loc[df['interval2'] == 2]
    df3 = df.loc[df['interval3'] == 3]
    df4 = df.loc[df['interval4'] == 4]
    df5 = df.loc[df['interval5'] == 5]
    df6 = df.loc[df['interval6'] == 6] #is this getting all values?

    mean1 = np.mean(dfOne["avgVacency"]) #.round
    mean2 = np.mean(df2["avgVacency"])
    mean3 = np.mean(df3["avgVacency"])
    mean4 = np.mean(df4["avgVacency"])
    mean5 = np.mean(df5["avgVacency"])
    mean6 = np.mean(df6["avgVacency"])

    columns = ['Time', 'avgVac', 'TotalBikes']
    dfFinal = pd.DataFrame([["06:00 - 09:00", mean1, vAxis], ["09:00 - 12:00", mean2, vAxis], 
                            ["12:00 - 15:00", mean3, vAxis], ["15:00 - 18:00", mean4, vAxis], 
                            ["18:00 - 21:00", mean5, vAxis], ["21:00 - 00:00", mean6, vAxis]], 
                           columns=columns)
    df1 = dfFinal.to_json(orient='records') #json string
    c.close()
    g.db.close()
    return df1

@app.route('/chartWeek')
def make_chartWeekly():
    g.db = dbconnect.connection()
    c = g.db.cursor()
    cur = c.execute(sql3.format(stationChart=stationData))
    
    chdata = [x for x in c.fetchall()]
    df = pd.DataFrame(data=chdata)
    df['avgVacency'] = round(df[2], 0)
    # convert string time to datetime for easy manipulation
    end = datetime.time(0, 0, 0)
    start = datetime.time(6, 0, 0)
    
    df['my_dates'] = pd.to_datetime(df[1])
    df['weekday'] = df['my_dates'].dt.weekday_name
    df.sort(columns=['weekday'], inplace=True)
    # df.set_index(keys=['weekday'], drop=False, inplace=True)
    
    weeklist = df['weekday'].unique().tolist()
    mon = df.loc[df.weekday == 'Monday']
    tue = df.loc[df.weekday == 'Tuesday']
    wed = df.loc[df.weekday == 'Wednesday']
    thur = df.loc[df.weekday == 'Thursday']
    fri = df.loc[df.weekday == 'Friday']
    sat = df.loc[df.weekday == 'Saturday']
    sun = df.loc[df.weekday == 'Sunday']
    
    #print(tue)
    print(sat.shape)
    print(weeklist)
    dfComplete = pd.DataFrame
    
    def intervals(df):
        print("HELLO")
        interval0s = datetime.time(6, 0, 0)
        interval0e = datetime.time(8, 59, 59)
        interval1s = datetime.time(9, 0, 0)
        interval1e = datetime.time(11, 59, 59)
        interval2s = datetime.time(12, 0, 0)
        interval2e = datetime.time(14, 59, 59)
        interval3s = datetime.time(15, 0, 0)
        interval3e = datetime.time(17, 59, 59)
        interval4s = datetime.time(18, 0, 0)
        interval4e = datetime.time(20, 59, 59)
        interval5s = datetime.time(21, 0, 0)
        interval5e = datetime.time(23, 59, 59)
        
        df['interval1'] = 0
        df['interval2'] = 0
        df['interval3'] = 0
        df['interval4'] = 0
        df['interval5'] = 0
        df['interval6'] = 0
        for i, row in df.iterrows():
            if df[1][i] > end and df[1][i] < start:
                df.drop(i, inplace=True)
            elif df[1][i] > interval0s and df[1][i] < interval0e:
                df.loc[i, 'interval1'] = 1
            elif df[1][i] > interval1s and df[1][i] < interval1e:
                df.loc[i, 'interval2'] = 2
            elif df[1][i] > interval2s and df[1][i] < interval2e:
                df.loc[i, 'interval3'] = 3
            elif df[1][i] > interval3s and df[1][i] < interval3e:
                df.loc[i, 'interval4'] = 4
            elif df[1][i] > interval4s and df[1][i] < interval4e:
                df.loc[i, 'interval5'] = 5
            elif df[1][i] > interval5s and df[1][i] < interval5e:
                df.loc[i, 'interval6'] = 6
        dfOne = df.loc[df['interval1'] == 1]
        df2 = df.loc[df['interval2'] == 2]
        df3 = df.loc[df['interval3'] == 3]
        df4 = df.loc[df['interval4'] == 4]
        df5 = df.loc[df['interval5'] == 5]
        df6 = df.loc[df['interval6'] == 6]  # is this getting all values?
        mean1 = np.mean(dfOne["avgVacency"])  # .round
        mean2 = np.mean(df2["avgVacency"])
        mean3 = np.mean(df3["avgVacency"])
        mean4 = np.mean(df4["avgVacency"])
        mean5 = np.mean(df5["avgVacency"])
        mean6 = np.mean(df6["avgVacency"])
        columns = ['Time', 'avgVac'] #df holding indiv days
        dfFinal = pd.DataFrame(
            [["06:00 - 09:00", mean1], ["09:00 - 12:00", mean2], ["12:00 - 15:00", mean3], ["15:00 - 18:00", mean4],
             ["18:00 - 21:00", mean5], ["21:00 - 00:00", mean6]], columns=columns)
        df1 = dfFinal.to_json(orient='records')  # json string
        return df1
    
    weekList = [mon, tue, wed, thur, fri, sat, sun]
    x = intervals(mon)
    
    print(x)
    # for i in range(0, len(weekList)):
    #     #print(type(df[i]))
    #     df[i] = intervals(mon)
    #     print(df[i].shape)
    #     dfComplete.append(df[i])
    
    print(dfComplete.shape)
    c.close()
    g.db.close()
    # return matrix #=matrix)
    return df

@app.route('/search', methods=['GET', 'POST'])
@app.route('/index1', methods=['GET', 'POST'])
def search():
    # if request.method == "POST":
    g.db = dbconnect.connection()
    c = g.db.cursor()
    search = request.form['search']
    sql4_str = sql4.format(addr = search)
    cur = c.execute(sql4_str) 
    rows = c.fetchall()
    stations = {}
    for eachRow in rows:
        case = {'key1': eachRow[0], 'key2': eachRow[1], 
                'key3':eachRow[2], 'key4':eachRow[3], 
                'key5':eachRow[4],'key6':eachRow[5],
                'key7':eachRow[6],'key8':eachRow[7],
                'key9':eachRow[8],'key10':eachRow[9]}
        stations.update(case)
    print('connection')
    c.close()
    g.db.close()
    print(stations)
    return  render_template('index1.html', stations=stations )
        
if __name__ == '__main__':
        app.run(debug=True, use_reloader=True)